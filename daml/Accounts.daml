{-# LANGUAGE ApplicativeDo #-}
module Accounts where

import Daml.Script

template ProposeMakeDeposit
  with
    proposer : Party
    amount : Int
    bank : Party
    observers : Party
  where
    signatory proposer
    observer [bank, observers]
    
    choice AcceptDeposit : ContractId Account
      controller bank
      do
        create Account with
          bank
          owner = proposer
          balance = amount
          observers 
          
template Account
  with
    bank : Party
    owner : Party
    balance : Int
    observers : Party
  where
    key owner : Party
    maintainer key

    observer observers, bank

    signatory bank, owner
    -- signatory owner

    choice CreateEscrowAccount : (ContractId EscrowAccount, ContractId Account)
      with
        amount : Int
        offer : Text
      controller owner
      do
        assert(balance - amount > 0)
        assert(amount >= 0)
        escrowAccount <- create EscrowAccount with
          bank
          escrowOwner = owner
          amount
          offer
          observers
        newAccount <- create this with
          balance = balance - amount
        return (escrowAccount, newAccount)

    choice DepositEscrowFunds : ContractId Account
      with
        escrowOwner : Party
        offer : Text
      controller owner
      do
        let
          cKey = EscrowKey with
            escrowOwner
            offer

        (cid, contract) <- fetchByKey @EscrowAccount cKey
        assert(owner == contract.escrowOwner)
        newAccount <- create this with
          balance = balance + contract.amount
        exercise cid Archive
        return newAccount
        
data EscrowKey = EscrowKey with
  escrowOwner : Party
  offer : Text
    deriving (Eq, Show)

template EscrowAccount
  with
    bank : Party
    escrowOwner : Party
    amount : Int
    offer : Text
    observers : Party
  where
    key EscrowKey with
        escrowOwner
        offer
      : EscrowKey
    maintainer key.escrowOwner
    signatory escrowOwner

    -- choice DepositEscrow : ()
    --   controller escrowOwner
    --   do
    --     return ()      

    choice PayClaim : ContractId EscrowAccount
      with
        owedAmount : Int
      observer bank
      controller escrowOwner
      do
        assert(amount == owedAmount)
        create this with
          amount = amount - owedAmount
    
    choice AcceptPayment : ContractId EscrowAccount
      with
        payment : Int
      observer bank
      controller escrowOwner
      do
        assert(payment > 0)
        create this with
          amount = amount + payment

template Payable
  with
    amount : Int
    from : Party
    to : Party
    admin : Party
    offer : Text
  where
    signatory to
    observer from, admin

    choice ClaimPaid: (ContractId EscrowAccount, ContractId PaymentClaim)
      controller from
        do
          let
            cKey = EscrowKey with
              escrowOwner = from
              offer
          updatedFromAccount <- exerciseByKey @EscrowAccount (cKey) PayClaim with owedAmount = amount
          newPaymentClaim <- create PaymentClaim with
            amount
            from
            to
            admin
            offer
          return (updatedFromAccount, newPaymentClaim)

template PaymentClaim
  with
    amount: Int
    from: Party
    to: Party
    admin: Party
    offer : Text
  where
    signatory from
    observer to, admin

    choice Receive: (ContractId EscrowAccount, ContractId Receipt)
      controller to
        do
          let
            cKey = EscrowKey with
              escrowOwner = to
              offer
          updatedAccount <- exerciseByKey @EscrowAccount (cKey) AcceptPayment with payment = amount
          receipt <- create Receipt
            with
              amount
              from
              to
          return (updatedAccount, receipt)

template Receipt
  with
    amount: Int
    from: Party
    to: Party
  where
    signatory to
    observer from


test = script do
  bank <- allocateParty "Bank"
  martin <- allocateParty "Martin"
  damien <- allocateParty "Damien"
  admin <- allocateParty "Admin"

  martinDepositProposal <- submit martin do
    createCmd ProposeMakeDeposit with
      proposer = martin
      amount = 100
      bank
      observers = admin

  martinAccount <- submit bank do
    exerciseCmd martinDepositProposal AcceptDeposit

  damienDepositProposal <- submit damien do
    createCmd ProposeMakeDeposit with
      proposer = damien
      amount = 200
      bank
      observers = admin
  
  damienAccount <- submit bank do
    exerciseCmd damienDepositProposal AcceptDeposit

  (martinEscrowCid, martinAccountCid) <- submit martin do
    exerciseCmd martinAccount CreateEscrowAccount with
      amount = 0
      offer = "ABC"

  (damienEscrowCid, damienAccountCid) <- submit damien do
    exerciseCmd damienAccount CreateEscrowAccount with
      amount = 50
      offer = "ABC"

  martinRequestsDamien <- submit martin do
    createCmd Payable with
      amount = 50
      from = damien
      to = martin
      admin
      offer = "ABC"
  
  (damienNewEscrowAccountCid, martinPaymentClaim) <- submit damien do
    exerciseCmd martinRequestsDamien ClaimPaid

  (martinNewEscrowAccountCid, receipt) <- submit martin do
    exerciseCmd martinPaymentClaim Receive

  martinFinalAccountCid <- submit martin do
    exerciseCmd martinAccountCid DepositEscrowFunds with
      escrowOwner = martin
      offer = "ABC"

  damienFinalAccountCid <- submit damien do
    exerciseCmd damienAccountCid DepositEscrowFunds with
      escrowOwner = damien
      offer = "ABC"

  pure()

