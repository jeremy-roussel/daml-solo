{-# LANGUAGE ApplicativeDo #-}
module Accounts where

import Daml.Script

template ProposeMakeDeposit
  with
    proposer : Party
    amount : Int
    bank : Party
    observers : Party
  where
    signatory proposer
    observer [bank, observers]
    
    choice AcceptDeposit : ContractId Account
      controller bank
      do
        create Account with
          bank
          owner = proposer
          balance = amount
          observers 
          

template Account
  with
    bank : Party
    owner : Party
    balance : Int
    observers : Party
  where
    key owner : Party
    maintainer key

    signatory bank, owner

    choice PayClaim : ContractId Account
      with
        owedAmount : Int
      controller owner
      do
        assert(balance > owedAmount)
        create this with
          balance = balance - owedAmount
    
    choice AcceptPayment : ContractId Account
      with
        payment : Int
      controller owner
      do
        assert(payment > 0)
        create this with
          balance = balance + payment

template Payable
  with
    amount : Int
    from : Party
    to : Party
    admin : Party
  where
    signatory to
    observer from, admin

    choice ClaimPaid: (ContractId Account, ContractId PaymentClaim)
      controller from
        do
          updatedFromAccount <- exerciseByKey @Account (from) PayClaim with owedAmount = amount
          newPaymentClaim <- create PaymentClaim with
            amount
            from
            to
            admin
          return (updatedFromAccount, newPaymentClaim)

template PaymentClaim
  with
    amount: Int
    from: Party
    to: Party
    admin: Party
  where
    signatory from
    observer to, admin

    choice Receive: (ContractId Account, ContractId Receipt)
      controller to
        do
          updatedAccount <- exerciseByKey @Account (to) AcceptPayment with payment = amount
          receipt <- create Receipt
            with
              amount
              from
              to
          return (updatedAccount, receipt)

template Receipt
  with
    amount: Int
    from: Party
    to: Party
  where
    signatory to
    observer from


test = script do
  bank <- allocateParty "Bank"
  martin <- allocateParty "Martin"
  damien <- allocateParty "Damien"
  admin <- allocateParty "Admin"

  martinDepositProposal <- submit martin do
    createCmd ProposeMakeDeposit with
      proposer = martin
      amount = 100
      bank
      observers = admin

  martinAcount <- submit bank do
    exerciseCmd martinDepositProposal AcceptDeposit

  damienDepositProposal <- submit damien do
    createCmd ProposeMakeDeposit with
      proposer = damien
      amount = 200
      bank
      observers = admin
  
  damienAcount <- submit bank do
    exerciseCmd damienDepositProposal AcceptDeposit

  martinRequestsDamien <- submit martin do
    createCmd Payable with
      amount = 50
      from = damien
      to = martin
      admin
  
  (damienNewAccountCid, martinPaymentClaim) <- submit damien do
    exerciseCmd martinRequestsDamien ClaimPaid

  (martinNewAccountCid, receipt) <- submit martin do
    exerciseCmd martinPaymentClaim Receive


  pure()

